#+title: Readme

Implement the functionality of PathName as set of String methods.
This way, paths can be saved as Strings. This saves having to check
whether one is working with a String or with a PathName.

Almost all of these methods convert the String to a PathName
and use the PathName internally.  This guarantees consistency
when working on different operating systems.

Functionality to port is the following:

* PathName.scroot

Return current working directory. See implementation:

#+begin_src sclang
*initClass {
		scroot = File.getcwd;
		tmp = Platform.defaultTempDir;
		if(tmp.isNil, {
			"No valid temp directory found. Please set it manually using PathName.tmp_".warn
		})
	}
#+end_src

Instance Methods
* fileName
returns just the name of the file itself; i.e. everything after the last slash in the full path.
(
var myPath;
myPath = PathName.new("MyDisk/SC 2.2.8 f/Sounds/FunkyChicken");
myPath.fileName.postln;
)

* fileNameWithoutExtension
returns the name of the file itself without the file extension.

* extension
returns the file extension, i.e. everything after the last full-stop in the -fileName.

* pathOnly
returns the full path up to the file name itself; i.e. everything up to and including the last slash. This is handy e.g. for storing several files in the same folder.
(
var myPath;
myPath = PathName.new("MyDisk/SC 2.2.8 f/Sounds/FunkyChicken");
myPath.pathOnly.postln;
)

* isAbsolutePath

* asAbsolutePath

* isRelativePath

* asRelativePath(relativeTo)
you MUST have correctly initialized the scroot classvar for this to know what it is relative to !

* folderName
returns only the name of the folder that the file is in; i.e. everything in between the last but one and the last slash.
(
var myPath;
myPath = PathName.new("MyDisk/SC 2.2.8 f/Sounds/FunkyChicken");
myPath.folderName.postln;
)
* fullPath
returns the full path name that PathName contains.
(
var myPath;
myPath = PathName.new("MyDisk/SC 2.2.8 f/Sounds/FunkyChicken");
myPath.fullPath.postln;
)

* entries
returns a list of all the files+folders inside the folder represented by this path.
(
var myPath;
myPath = PathName.new("./");
myPath.entries.postln;
)

* files
returns a list of all the files in the folder represented by this path.
(
var myPath;
myPath = PathName.new("./");
myPath.files.postln;
)

* folders
returns a list of all the subfolders of the folder represented by this path.
(
var myPath;
myPath = PathName.new("./");
myPath.folders.postln;
)

* isFile
returns a Boolean indicating whether or not the path represents a file (not a folder).
(
var myPath;
myPath = PathName.new("./");
myPath.isFile.postln;
)

* isFolder
returns a Boolean indicating whether or not the path represents a folder (not a file).
(
var myPath;
myPath = PathName.new("./");
myPath.isFolder.postln;
)

* filesDo(func)
Iterates over all files found in the pathname, including ones in subfolders.
(
var myPath;
myPath = PathName.new("./");
myPath.filesDo{|afile| afile.postln};
)

* allFolders
returns a list of all the folder names contained in the pathname itself.
(
var myPath;
myPath = PathName.new("MyDisk/SC 2.2.8 f/Sounds/FunkyChicken");
myPath.allFolders.postln;
)

* diskName
if path is an absolute path, returns the disk name; else a blank string.
(
var myPath;
myPath = PathName.new("MyDisk/SC 2.2.8 f/Sounds/FunkyChicken");
myPath.diskName.postln;
)
​
( // note the / at the start
var myPath;
myPath = PathName.new("/MyDisk/SC 2.2.8 f/Sounds/FunkyChicken");
myPath.diskName.postln;
)
+/+(path)
Path concatenation operator - useful for avoiding doubling-up slashes unnecessarily.
(PathName("/somewhere") +/+ PathName("over/the/rainbow")).postln;
(PathName("/somewhere") +/+ PathName("/over/the/rainbow")).postln;
.
* endNumber
returns a number at the end of PathName. Returns zero if there is no number.
PathName("floating1").endNumber.postln;
PathName("floating").endNumber.postln;

* noEndNumbers
returns -fullPath without any numbers at the end.
PathName("floating1").noEndNumbers.postln;
PathName("floating").noEndNumbers.postln;

* nextName
generates a sensible next name for a file by incrementing a number at the end of PathName, or by adding one if there is none. This is useful for recording files with consecutive names, and e.g. to generate a new filename when you don't want to overwrite an existing file with the current name.
PathName("floating34").nextName.postln;
PathName("floating").nextName.postln;
PathName("floating12_3A4X_56.7").nextName.postln;
Inherited instance methods
270 methods from Object ► show
Undocumented instance methods

* absolutePath

* colonIndices

* deepFiles

* dumpToDoc(title: "Untitled")

* dumpTree

* endNumberIndex

* fileNameWithoutDoubleExtension

* lastColonIndex

* parentPath

* pathMatch

* streamTree(str, tabs: 0)
