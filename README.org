#+TITLE: Sc-Hacks-redux

* About
This library provides utilities for live coding in SuperCollider, including a way to share code over the network using OscGroups by Ross Bencina.

* installation

Put the sc-hacks-redux folder or its alias (symbolic link) in the SuperCollider user exensions folder and recompile the class library.

* The =+>= operator

=source +> player=

Create a new sound process from the source and play it in the player. The player is a name written as a symbol. The source can be a function, an event, or a symbol.

** Function +> player;

Playing a function in a player with =+>= is similar to running ={}.play=.

#+begin_src sclang
{ WhiteNoise.ar(0.05).dup } +> \myplayer;
#+end_src

The difference is that the synth is stored under the name of the player, and can be released or replaced.

** Event +> player;

Playing an event in a player is similar to playing a Pbind using as keys the keys given in the event:

#+begin_src sclang
(degree: 1, dur: 0.2) +> \myplayer;
#+end_src

This is not the same as playing a Pbind. Instead, it starts an =EventStream= which has some additional capabilities explained below.

** Symbol +> player;

=Symbol +> player= starts a synth using the synthdef named by =Symbol=:

#+begin_src sclang
\default +> \myplayer;
#+end_src

* Stopping a player with =stop=
To stop a player, send it the message =stop=.

#+begin_src sclang
{ WhiteNoise.ar(0.05).dup } +> \myplayer;
// after a while:
\myplayer.stop;
#+end_src

* Specifying duration of release with argument to =stop=

A numeric argument to =stop= sent to a symbol specifies the release time when stopping the player stored in that symbol:

#+begin_src sclang
{ WhiteNoise.ar(0.05).dup } +> \myplayer;
// Relese with 5 seconds release time:
\myplayer.stop(5); // same as: \myplayer stop: 5;
#+end_src

* Setting a control of a synth with =<+=

The syntax is:

#+begin_src sclang
\parameter <+.player value;
#+end_src

Example:

#+begin_src sclang
\default +> \myplayer;
// set freq control of myplayer:
\freq <+.myplayer 600;
#+end_src

* Resuming a pattern with start

An EventStream playing in a player be stopped with =stop= and restarted with =start=.  It will continue playing its streams at the position last stopped:

#+begin_src sclang
(degree: Pseq((0..10), inf)) +> \myresume;
\myresume.stop;
\myresume.start;
#+end_src

* Modifying a playing pattern with ++>

To modify an EventStream (i.e. a playing pattern), or a Synth while it is playing, use the ++> operator.

If an EventStream is playing in a player, then =Event ++> player= will set all the keys of the EventStream to the stream values of the corresponding keys contained in =Event=.

#+begin_src sclang
(degree: Pseq((0..10), inf)) +> \modifiable;
(dur: 0.15) ++> \modifiable;
#+end_src

